<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd">

    <!-- 通过注解装配对象 -->
	<context:component-scan base-package="com.dianping.annotation" />

	<!-- 通过注解装配对象 -->
	<!--<context:annotation-config />-->

    <context:property-placeholder location="classpath*:config/conf.properties"/>

    <bean id="myBean" class="com.dianping.start.MyBean" init-method="initMyself">
        <constructor-arg value="dajun" />
        <constructor-arg value="0" />
        <property name="age" value="25" />
        <property name="password" value="${mybean.password}"/>
        <property name="bankSavings" ref="myBankSavings"/>
        <property name="sex" value="#guess#"/>
    </bean>

    <bean id="myBankSavings" class="com.dianping.start.ChildBeanFactory" factory-method="getBankSavings" lazy-init="true" />

    <bean id="myBeanFactoryPostProcessor" class="com.dianping.start.MyBeanFactoryPostProcessor" />




    <!-- 依赖于dependencyB完全初始化完成 -->
    <bean id="dependencyC" class="com.dianping.dependency.DependencyC" depends-on="dependencyB" init-method="initialize">
        <property name="dependencyA" ref="dependencyA"/>
    </bean>
    <!-- 循环依赖出现问题只发生在相互ref对方作为构造函数参数的时候 -->
    <bean id="dependencyA" class="com.dianping.dependency.DependencyA" init-method="initialize">
        <property name="dependencyB" ref="dependencyB"/>
    </bean>
    <bean id="dependencyB" class="com.dianping.dependency.DependencyB" init-method="initialize">
        <property name="dependencyA" ref="dependencyA"/>
    </bean>




    <bean id="monitorBeforeAdvice" class="com.dianping.aop.spring.MonitorBeforeAdvice" />
    <bean id="monitorAfterReturningAdvice" class="com.dianping.aop.spring.MonitorAfterReturningAdvice" />

    <bean id="adminServiceTarget" class="com.dianping.aop.AdminServiceImpl" />

    <bean id="adminServiceOfJdkDynamic" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!-- jdkDynamicAopProxy 指定代理的接口 -->
        <property name="proxyInterfaces" value="com.dianping.aop.AdminService"></property>
        <!-- 指定使用的增强 -->
        <property name="interceptorNames" >
            <list>
                <idref local="monitorBeforeAdvice"></idref>
                <idref local="monitorAfterReturningAdvice"></idref>
            </list>
        </property>
        <!--<property name="interceptorNames" value="monitorBeforeAdvice,monitorAfterReturningAdvice" />-->
        <!-- 指定对哪个bean进行代理 -->
        <property name="target" ref="adminServiceTarget" />
    </bean>
    <bean id="adminServiceOfCglib" class="org.springframework.aop.framework.ProxyFactoryBean">
        <!-- 指定使用的增强 -->
        <property name="interceptorNames" value="monitorBeforeAdvice,monitorAfterReturningAdvice" />
        <!-- 指定对哪个bean进行代理 -->
        <property name="target" ref="adminServiceTarget" />
        <!-- 使用cglib代理，无需再设置proxyInterfaces，即便设置也被忽略 -->
        <property name="proxyTargetClass" value="true" />
    </bean>



    <bean id="userService" class="com.dianping.aop.UserServiceImpl" />
    <bean id="actionOfSpringBean" class="com.dianping.struts.ActionOfSpringBean" >
        <property name="userService" ref="userService"/>
    </bean>




</beans>